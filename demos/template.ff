module M_swap
implicit none                       ! declare that all variables must be explicitly declared
private

$! note if the environment variable $PREP_DOCUMENT_DIR is not set the -file option is ignored.
$BLOCK COMMENT -file swap.3.man
NAME
   swap(3f) - swap two intrinsic variables
SYNOPSIS
   elemental subroutine swap(x,y)
DESCRIPTION
   Swap two values of intrinsic type
OPTIONS
   X one of the values to swap
   Y one of the values to swap
EXAMPLE
$BLOCK 
$IFDEF PREP_DOCUMENT_DIR ! call system commands to convert manpage markdown to roff 
$  SYSTEM txt2man $PREP_DOCUMENT_DIR/doc/swap.3.man > man/man3/swap.3
$  SYSTEM gzip man/man3/swap.3
$ENDIF

public :: swap

integer,parameter :: dp=kind(0.0d0)
integer,parameter :: cd=kind(0.0d0)

interface swap
   module procedure r_swap, i_swap, c_swap, s_swap
   module procedure d_swap, l_swap, cd_swap
end interface

$! write a generic function like a POSIX shell "here document".
$! currently, only ${NAME} is supported

$PARCEL SWAP
elemental subroutine ${PREFIX}_swap(x,y)
!> swap two ${TYPE} variables
${TYPE}, intent(inout) :: x,y
${TYPE}                :: temp
   temp = x; x = y; y = temp
end subroutine ${PREFIX}_swap
$PARCEL

contains
$!==============================
$SET TYPE doubleprecision
$SET PREFIX d
$POST SWAP
$!==============================
$SET TYPE real
$SET PREFIX r
$POST SWAP
$!==============================
$SET TYPE integer
$SET PREFIX i
$POST SWAP
$!==============================
$SET TYPE logical
$SET PREFIX l
$POST SWAP
$!==============================
$SET TYPE complex
$SET PREFIX c
$POST SWAP
$!==============================
$SET TYPE complex(kind=cd)
$SET PREFIX cd
$POST SWAP
$!==============================
elemental subroutine s_swap(string1,string2)

$BLOCK COMMENT
  F90 NOTE:
   + string_temp is an automatic character object whose size is not a constant expression.
   + Automatic objects cannot be saved or initialized.
   + Note that the len of a dummy argument can be used to calculate the automatic variable length.
   + Therefore, you can make sure len is at least max(len(string1),len(string2)) by adding the two lengths together:
$BLOCK

character(len=*), intent(inout)             :: string1,string2
character( len=max(len(string1),len(string2))) :: string_temp
   string_temp = string1; string1 = string2; string2 = string_temp
end subroutine s_swap
end module M_swap
$!==============================
program testit
use M_swap, only : swap
integer :: i=10,j=20
real    :: x=10.10,y=20.20

write(*,*)i,j
call swap(i,j)
write(*,*)i,j

write(*,*)x,y
call swap(x,y)
write(*,*)x,y

end program testit
